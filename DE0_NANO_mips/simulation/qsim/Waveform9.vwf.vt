// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/15/2017 19:15:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mips
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mips_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mips_vlg_check_tst (
	MemAddress,
	MemData,
	MemEna,
	sampler_rx
);
input [31:0] MemAddress;
input [31:0] MemData;
input  MemEna;
input sampler_rx;

reg [31:0] MemAddress_expected;
reg [31:0] MemData_expected;
reg  MemEna_expected;

reg [31:0] MemAddress_prev;
reg [31:0] MemData_prev;
reg  MemEna_prev;

reg [31:0] MemAddress_expected_prev;
reg [31:0] MemData_expected_prev;
reg  MemEna_expected_prev;

reg [31:0] last_MemAddress_exp;
reg [31:0] last_MemData_exp;
reg  last_MemEna_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	MemAddress_prev = MemAddress;
	MemData_prev = MemData;
	MemEna_prev = MemEna;
end

// update expected /o prevs

always @(trigger)
begin
	MemAddress_expected_prev = MemAddress_expected;
	MemData_expected_prev = MemData_expected;
	MemEna_expected_prev = MemEna_expected;
end


// expected MemAddress[ 31 ]
initial
begin
	MemAddress_expected[31] = 1'bX;
end 
// expected MemAddress[ 30 ]
initial
begin
	MemAddress_expected[30] = 1'bX;
end 
// expected MemAddress[ 29 ]
initial
begin
	MemAddress_expected[29] = 1'bX;
end 
// expected MemAddress[ 28 ]
initial
begin
	MemAddress_expected[28] = 1'bX;
end 
// expected MemAddress[ 27 ]
initial
begin
	MemAddress_expected[27] = 1'bX;
end 
// expected MemAddress[ 26 ]
initial
begin
	MemAddress_expected[26] = 1'bX;
end 
// expected MemAddress[ 25 ]
initial
begin
	MemAddress_expected[25] = 1'bX;
end 
// expected MemAddress[ 24 ]
initial
begin
	MemAddress_expected[24] = 1'bX;
end 
// expected MemAddress[ 23 ]
initial
begin
	MemAddress_expected[23] = 1'bX;
end 
// expected MemAddress[ 22 ]
initial
begin
	MemAddress_expected[22] = 1'bX;
end 
// expected MemAddress[ 21 ]
initial
begin
	MemAddress_expected[21] = 1'bX;
end 
// expected MemAddress[ 20 ]
initial
begin
	MemAddress_expected[20] = 1'bX;
end 
// expected MemAddress[ 19 ]
initial
begin
	MemAddress_expected[19] = 1'bX;
end 
// expected MemAddress[ 18 ]
initial
begin
	MemAddress_expected[18] = 1'bX;
end 
// expected MemAddress[ 17 ]
initial
begin
	MemAddress_expected[17] = 1'bX;
end 
// expected MemAddress[ 16 ]
initial
begin
	MemAddress_expected[16] = 1'bX;
end 
// expected MemAddress[ 15 ]
initial
begin
	MemAddress_expected[15] = 1'bX;
end 
// expected MemAddress[ 14 ]
initial
begin
	MemAddress_expected[14] = 1'bX;
end 
// expected MemAddress[ 13 ]
initial
begin
	MemAddress_expected[13] = 1'bX;
end 
// expected MemAddress[ 12 ]
initial
begin
	MemAddress_expected[12] = 1'bX;
end 
// expected MemAddress[ 11 ]
initial
begin
	MemAddress_expected[11] = 1'bX;
end 
// expected MemAddress[ 10 ]
initial
begin
	MemAddress_expected[10] = 1'bX;
end 
// expected MemAddress[ 9 ]
initial
begin
	MemAddress_expected[9] = 1'bX;
end 
// expected MemAddress[ 8 ]
initial
begin
	MemAddress_expected[8] = 1'bX;
end 
// expected MemAddress[ 7 ]
initial
begin
	MemAddress_expected[7] = 1'bX;
end 
// expected MemAddress[ 6 ]
initial
begin
	MemAddress_expected[6] = 1'bX;
end 
// expected MemAddress[ 5 ]
initial
begin
	MemAddress_expected[5] = 1'bX;
end 
// expected MemAddress[ 4 ]
initial
begin
	MemAddress_expected[4] = 1'bX;
end 
// expected MemAddress[ 3 ]
initial
begin
	MemAddress_expected[3] = 1'bX;
end 
// expected MemAddress[ 2 ]
initial
begin
	MemAddress_expected[2] = 1'bX;
end 
// expected MemAddress[ 1 ]
initial
begin
	MemAddress_expected[1] = 1'bX;
end 
// expected MemAddress[ 0 ]
initial
begin
	MemAddress_expected[0] = 1'bX;
end 
// expected MemData[ 31 ]
initial
begin
	MemData_expected[31] = 1'bX;
end 
// expected MemData[ 30 ]
initial
begin
	MemData_expected[30] = 1'bX;
end 
// expected MemData[ 29 ]
initial
begin
	MemData_expected[29] = 1'bX;
end 
// expected MemData[ 28 ]
initial
begin
	MemData_expected[28] = 1'bX;
end 
// expected MemData[ 27 ]
initial
begin
	MemData_expected[27] = 1'bX;
end 
// expected MemData[ 26 ]
initial
begin
	MemData_expected[26] = 1'bX;
end 
// expected MemData[ 25 ]
initial
begin
	MemData_expected[25] = 1'bX;
end 
// expected MemData[ 24 ]
initial
begin
	MemData_expected[24] = 1'bX;
end 
// expected MemData[ 23 ]
initial
begin
	MemData_expected[23] = 1'bX;
end 
// expected MemData[ 22 ]
initial
begin
	MemData_expected[22] = 1'bX;
end 
// expected MemData[ 21 ]
initial
begin
	MemData_expected[21] = 1'bX;
end 
// expected MemData[ 20 ]
initial
begin
	MemData_expected[20] = 1'bX;
end 
// expected MemData[ 19 ]
initial
begin
	MemData_expected[19] = 1'bX;
end 
// expected MemData[ 18 ]
initial
begin
	MemData_expected[18] = 1'bX;
end 
// expected MemData[ 17 ]
initial
begin
	MemData_expected[17] = 1'bX;
end 
// expected MemData[ 16 ]
initial
begin
	MemData_expected[16] = 1'bX;
end 
// expected MemData[ 15 ]
initial
begin
	MemData_expected[15] = 1'bX;
end 
// expected MemData[ 14 ]
initial
begin
	MemData_expected[14] = 1'bX;
end 
// expected MemData[ 13 ]
initial
begin
	MemData_expected[13] = 1'bX;
end 
// expected MemData[ 12 ]
initial
begin
	MemData_expected[12] = 1'bX;
end 
// expected MemData[ 11 ]
initial
begin
	MemData_expected[11] = 1'bX;
end 
// expected MemData[ 10 ]
initial
begin
	MemData_expected[10] = 1'bX;
end 
// expected MemData[ 9 ]
initial
begin
	MemData_expected[9] = 1'bX;
end 
// expected MemData[ 8 ]
initial
begin
	MemData_expected[8] = 1'bX;
end 
// expected MemData[ 7 ]
initial
begin
	MemData_expected[7] = 1'bX;
end 
// expected MemData[ 6 ]
initial
begin
	MemData_expected[6] = 1'bX;
end 
// expected MemData[ 5 ]
initial
begin
	MemData_expected[5] = 1'bX;
end 
// expected MemData[ 4 ]
initial
begin
	MemData_expected[4] = 1'bX;
end 
// expected MemData[ 3 ]
initial
begin
	MemData_expected[3] = 1'bX;
end 
// expected MemData[ 2 ]
initial
begin
	MemData_expected[2] = 1'bX;
end 
// expected MemData[ 1 ]
initial
begin
	MemData_expected[1] = 1'bX;
end 
// expected MemData[ 0 ]
initial
begin
	MemData_expected[0] = 1'bX;
end 

// expected MemEna
initial
begin
	MemEna_expected = 1'bX;
end 
// generate trigger
always @(MemAddress_expected or MemAddress or MemData_expected or MemData or MemEna_expected or MemEna)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected MemAddress = %b | expected MemData = %b | expected MemEna = %b | ",MemAddress_expected_prev,MemData_expected_prev,MemEna_expected_prev);
	$display("| real MemAddress = %b | real MemData = %b | real MemEna = %b | ",MemAddress_prev,MemData_prev,MemEna_prev);
`endif
	if (
		( MemAddress_expected_prev[0] !== 1'bx ) && ( MemAddress_prev[0] !== MemAddress_expected_prev[0] )
		&& ((MemAddress_expected_prev[0] !== last_MemAddress_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[0] = MemAddress_expected_prev[0];
	end
	if (
		( MemAddress_expected_prev[1] !== 1'bx ) && ( MemAddress_prev[1] !== MemAddress_expected_prev[1] )
		&& ((MemAddress_expected_prev[1] !== last_MemAddress_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[1] = MemAddress_expected_prev[1];
	end
	if (
		( MemAddress_expected_prev[2] !== 1'bx ) && ( MemAddress_prev[2] !== MemAddress_expected_prev[2] )
		&& ((MemAddress_expected_prev[2] !== last_MemAddress_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[2] = MemAddress_expected_prev[2];
	end
	if (
		( MemAddress_expected_prev[3] !== 1'bx ) && ( MemAddress_prev[3] !== MemAddress_expected_prev[3] )
		&& ((MemAddress_expected_prev[3] !== last_MemAddress_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[3] = MemAddress_expected_prev[3];
	end
	if (
		( MemAddress_expected_prev[4] !== 1'bx ) && ( MemAddress_prev[4] !== MemAddress_expected_prev[4] )
		&& ((MemAddress_expected_prev[4] !== last_MemAddress_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[4] = MemAddress_expected_prev[4];
	end
	if (
		( MemAddress_expected_prev[5] !== 1'bx ) && ( MemAddress_prev[5] !== MemAddress_expected_prev[5] )
		&& ((MemAddress_expected_prev[5] !== last_MemAddress_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[5] = MemAddress_expected_prev[5];
	end
	if (
		( MemAddress_expected_prev[6] !== 1'bx ) && ( MemAddress_prev[6] !== MemAddress_expected_prev[6] )
		&& ((MemAddress_expected_prev[6] !== last_MemAddress_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[6] = MemAddress_expected_prev[6];
	end
	if (
		( MemAddress_expected_prev[7] !== 1'bx ) && ( MemAddress_prev[7] !== MemAddress_expected_prev[7] )
		&& ((MemAddress_expected_prev[7] !== last_MemAddress_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[7] = MemAddress_expected_prev[7];
	end
	if (
		( MemAddress_expected_prev[8] !== 1'bx ) && ( MemAddress_prev[8] !== MemAddress_expected_prev[8] )
		&& ((MemAddress_expected_prev[8] !== last_MemAddress_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[8] = MemAddress_expected_prev[8];
	end
	if (
		( MemAddress_expected_prev[9] !== 1'bx ) && ( MemAddress_prev[9] !== MemAddress_expected_prev[9] )
		&& ((MemAddress_expected_prev[9] !== last_MemAddress_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[9] = MemAddress_expected_prev[9];
	end
	if (
		( MemAddress_expected_prev[10] !== 1'bx ) && ( MemAddress_prev[10] !== MemAddress_expected_prev[10] )
		&& ((MemAddress_expected_prev[10] !== last_MemAddress_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[10] = MemAddress_expected_prev[10];
	end
	if (
		( MemAddress_expected_prev[11] !== 1'bx ) && ( MemAddress_prev[11] !== MemAddress_expected_prev[11] )
		&& ((MemAddress_expected_prev[11] !== last_MemAddress_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[11] = MemAddress_expected_prev[11];
	end
	if (
		( MemAddress_expected_prev[12] !== 1'bx ) && ( MemAddress_prev[12] !== MemAddress_expected_prev[12] )
		&& ((MemAddress_expected_prev[12] !== last_MemAddress_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[12] = MemAddress_expected_prev[12];
	end
	if (
		( MemAddress_expected_prev[13] !== 1'bx ) && ( MemAddress_prev[13] !== MemAddress_expected_prev[13] )
		&& ((MemAddress_expected_prev[13] !== last_MemAddress_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[13] = MemAddress_expected_prev[13];
	end
	if (
		( MemAddress_expected_prev[14] !== 1'bx ) && ( MemAddress_prev[14] !== MemAddress_expected_prev[14] )
		&& ((MemAddress_expected_prev[14] !== last_MemAddress_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[14] = MemAddress_expected_prev[14];
	end
	if (
		( MemAddress_expected_prev[15] !== 1'bx ) && ( MemAddress_prev[15] !== MemAddress_expected_prev[15] )
		&& ((MemAddress_expected_prev[15] !== last_MemAddress_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[15] = MemAddress_expected_prev[15];
	end
	if (
		( MemAddress_expected_prev[16] !== 1'bx ) && ( MemAddress_prev[16] !== MemAddress_expected_prev[16] )
		&& ((MemAddress_expected_prev[16] !== last_MemAddress_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[16] = MemAddress_expected_prev[16];
	end
	if (
		( MemAddress_expected_prev[17] !== 1'bx ) && ( MemAddress_prev[17] !== MemAddress_expected_prev[17] )
		&& ((MemAddress_expected_prev[17] !== last_MemAddress_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[17] = MemAddress_expected_prev[17];
	end
	if (
		( MemAddress_expected_prev[18] !== 1'bx ) && ( MemAddress_prev[18] !== MemAddress_expected_prev[18] )
		&& ((MemAddress_expected_prev[18] !== last_MemAddress_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[18] = MemAddress_expected_prev[18];
	end
	if (
		( MemAddress_expected_prev[19] !== 1'bx ) && ( MemAddress_prev[19] !== MemAddress_expected_prev[19] )
		&& ((MemAddress_expected_prev[19] !== last_MemAddress_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[19] = MemAddress_expected_prev[19];
	end
	if (
		( MemAddress_expected_prev[20] !== 1'bx ) && ( MemAddress_prev[20] !== MemAddress_expected_prev[20] )
		&& ((MemAddress_expected_prev[20] !== last_MemAddress_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[20] = MemAddress_expected_prev[20];
	end
	if (
		( MemAddress_expected_prev[21] !== 1'bx ) && ( MemAddress_prev[21] !== MemAddress_expected_prev[21] )
		&& ((MemAddress_expected_prev[21] !== last_MemAddress_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[21] = MemAddress_expected_prev[21];
	end
	if (
		( MemAddress_expected_prev[22] !== 1'bx ) && ( MemAddress_prev[22] !== MemAddress_expected_prev[22] )
		&& ((MemAddress_expected_prev[22] !== last_MemAddress_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[22] = MemAddress_expected_prev[22];
	end
	if (
		( MemAddress_expected_prev[23] !== 1'bx ) && ( MemAddress_prev[23] !== MemAddress_expected_prev[23] )
		&& ((MemAddress_expected_prev[23] !== last_MemAddress_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[23] = MemAddress_expected_prev[23];
	end
	if (
		( MemAddress_expected_prev[24] !== 1'bx ) && ( MemAddress_prev[24] !== MemAddress_expected_prev[24] )
		&& ((MemAddress_expected_prev[24] !== last_MemAddress_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[24] = MemAddress_expected_prev[24];
	end
	if (
		( MemAddress_expected_prev[25] !== 1'bx ) && ( MemAddress_prev[25] !== MemAddress_expected_prev[25] )
		&& ((MemAddress_expected_prev[25] !== last_MemAddress_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[25] = MemAddress_expected_prev[25];
	end
	if (
		( MemAddress_expected_prev[26] !== 1'bx ) && ( MemAddress_prev[26] !== MemAddress_expected_prev[26] )
		&& ((MemAddress_expected_prev[26] !== last_MemAddress_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[26] = MemAddress_expected_prev[26];
	end
	if (
		( MemAddress_expected_prev[27] !== 1'bx ) && ( MemAddress_prev[27] !== MemAddress_expected_prev[27] )
		&& ((MemAddress_expected_prev[27] !== last_MemAddress_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[27] = MemAddress_expected_prev[27];
	end
	if (
		( MemAddress_expected_prev[28] !== 1'bx ) && ( MemAddress_prev[28] !== MemAddress_expected_prev[28] )
		&& ((MemAddress_expected_prev[28] !== last_MemAddress_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[28] = MemAddress_expected_prev[28];
	end
	if (
		( MemAddress_expected_prev[29] !== 1'bx ) && ( MemAddress_prev[29] !== MemAddress_expected_prev[29] )
		&& ((MemAddress_expected_prev[29] !== last_MemAddress_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[29] = MemAddress_expected_prev[29];
	end
	if (
		( MemAddress_expected_prev[30] !== 1'bx ) && ( MemAddress_prev[30] !== MemAddress_expected_prev[30] )
		&& ((MemAddress_expected_prev[30] !== last_MemAddress_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[30] = MemAddress_expected_prev[30];
	end
	if (
		( MemAddress_expected_prev[31] !== 1'bx ) && ( MemAddress_prev[31] !== MemAddress_expected_prev[31] )
		&& ((MemAddress_expected_prev[31] !== last_MemAddress_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemAddress[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemAddress_expected_prev);
		$display ("     Real value = %b", MemAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MemAddress_exp[31] = MemAddress_expected_prev[31];
	end
	if (
		( MemData_expected_prev[0] !== 1'bx ) && ( MemData_prev[0] !== MemData_expected_prev[0] )
		&& ((MemData_expected_prev[0] !== last_MemData_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[0] = MemData_expected_prev[0];
	end
	if (
		( MemData_expected_prev[1] !== 1'bx ) && ( MemData_prev[1] !== MemData_expected_prev[1] )
		&& ((MemData_expected_prev[1] !== last_MemData_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[1] = MemData_expected_prev[1];
	end
	if (
		( MemData_expected_prev[2] !== 1'bx ) && ( MemData_prev[2] !== MemData_expected_prev[2] )
		&& ((MemData_expected_prev[2] !== last_MemData_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[2] = MemData_expected_prev[2];
	end
	if (
		( MemData_expected_prev[3] !== 1'bx ) && ( MemData_prev[3] !== MemData_expected_prev[3] )
		&& ((MemData_expected_prev[3] !== last_MemData_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[3] = MemData_expected_prev[3];
	end
	if (
		( MemData_expected_prev[4] !== 1'bx ) && ( MemData_prev[4] !== MemData_expected_prev[4] )
		&& ((MemData_expected_prev[4] !== last_MemData_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[4] = MemData_expected_prev[4];
	end
	if (
		( MemData_expected_prev[5] !== 1'bx ) && ( MemData_prev[5] !== MemData_expected_prev[5] )
		&& ((MemData_expected_prev[5] !== last_MemData_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[5] = MemData_expected_prev[5];
	end
	if (
		( MemData_expected_prev[6] !== 1'bx ) && ( MemData_prev[6] !== MemData_expected_prev[6] )
		&& ((MemData_expected_prev[6] !== last_MemData_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[6] = MemData_expected_prev[6];
	end
	if (
		( MemData_expected_prev[7] !== 1'bx ) && ( MemData_prev[7] !== MemData_expected_prev[7] )
		&& ((MemData_expected_prev[7] !== last_MemData_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[7] = MemData_expected_prev[7];
	end
	if (
		( MemData_expected_prev[8] !== 1'bx ) && ( MemData_prev[8] !== MemData_expected_prev[8] )
		&& ((MemData_expected_prev[8] !== last_MemData_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[8] = MemData_expected_prev[8];
	end
	if (
		( MemData_expected_prev[9] !== 1'bx ) && ( MemData_prev[9] !== MemData_expected_prev[9] )
		&& ((MemData_expected_prev[9] !== last_MemData_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[9] = MemData_expected_prev[9];
	end
	if (
		( MemData_expected_prev[10] !== 1'bx ) && ( MemData_prev[10] !== MemData_expected_prev[10] )
		&& ((MemData_expected_prev[10] !== last_MemData_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[10] = MemData_expected_prev[10];
	end
	if (
		( MemData_expected_prev[11] !== 1'bx ) && ( MemData_prev[11] !== MemData_expected_prev[11] )
		&& ((MemData_expected_prev[11] !== last_MemData_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[11] = MemData_expected_prev[11];
	end
	if (
		( MemData_expected_prev[12] !== 1'bx ) && ( MemData_prev[12] !== MemData_expected_prev[12] )
		&& ((MemData_expected_prev[12] !== last_MemData_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[12] = MemData_expected_prev[12];
	end
	if (
		( MemData_expected_prev[13] !== 1'bx ) && ( MemData_prev[13] !== MemData_expected_prev[13] )
		&& ((MemData_expected_prev[13] !== last_MemData_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[13] = MemData_expected_prev[13];
	end
	if (
		( MemData_expected_prev[14] !== 1'bx ) && ( MemData_prev[14] !== MemData_expected_prev[14] )
		&& ((MemData_expected_prev[14] !== last_MemData_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[14] = MemData_expected_prev[14];
	end
	if (
		( MemData_expected_prev[15] !== 1'bx ) && ( MemData_prev[15] !== MemData_expected_prev[15] )
		&& ((MemData_expected_prev[15] !== last_MemData_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[15] = MemData_expected_prev[15];
	end
	if (
		( MemData_expected_prev[16] !== 1'bx ) && ( MemData_prev[16] !== MemData_expected_prev[16] )
		&& ((MemData_expected_prev[16] !== last_MemData_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[16] = MemData_expected_prev[16];
	end
	if (
		( MemData_expected_prev[17] !== 1'bx ) && ( MemData_prev[17] !== MemData_expected_prev[17] )
		&& ((MemData_expected_prev[17] !== last_MemData_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[17] = MemData_expected_prev[17];
	end
	if (
		( MemData_expected_prev[18] !== 1'bx ) && ( MemData_prev[18] !== MemData_expected_prev[18] )
		&& ((MemData_expected_prev[18] !== last_MemData_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[18] = MemData_expected_prev[18];
	end
	if (
		( MemData_expected_prev[19] !== 1'bx ) && ( MemData_prev[19] !== MemData_expected_prev[19] )
		&& ((MemData_expected_prev[19] !== last_MemData_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[19] = MemData_expected_prev[19];
	end
	if (
		( MemData_expected_prev[20] !== 1'bx ) && ( MemData_prev[20] !== MemData_expected_prev[20] )
		&& ((MemData_expected_prev[20] !== last_MemData_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[20] = MemData_expected_prev[20];
	end
	if (
		( MemData_expected_prev[21] !== 1'bx ) && ( MemData_prev[21] !== MemData_expected_prev[21] )
		&& ((MemData_expected_prev[21] !== last_MemData_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[21] = MemData_expected_prev[21];
	end
	if (
		( MemData_expected_prev[22] !== 1'bx ) && ( MemData_prev[22] !== MemData_expected_prev[22] )
		&& ((MemData_expected_prev[22] !== last_MemData_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[22] = MemData_expected_prev[22];
	end
	if (
		( MemData_expected_prev[23] !== 1'bx ) && ( MemData_prev[23] !== MemData_expected_prev[23] )
		&& ((MemData_expected_prev[23] !== last_MemData_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[23] = MemData_expected_prev[23];
	end
	if (
		( MemData_expected_prev[24] !== 1'bx ) && ( MemData_prev[24] !== MemData_expected_prev[24] )
		&& ((MemData_expected_prev[24] !== last_MemData_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[24] = MemData_expected_prev[24];
	end
	if (
		( MemData_expected_prev[25] !== 1'bx ) && ( MemData_prev[25] !== MemData_expected_prev[25] )
		&& ((MemData_expected_prev[25] !== last_MemData_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[25] = MemData_expected_prev[25];
	end
	if (
		( MemData_expected_prev[26] !== 1'bx ) && ( MemData_prev[26] !== MemData_expected_prev[26] )
		&& ((MemData_expected_prev[26] !== last_MemData_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[26] = MemData_expected_prev[26];
	end
	if (
		( MemData_expected_prev[27] !== 1'bx ) && ( MemData_prev[27] !== MemData_expected_prev[27] )
		&& ((MemData_expected_prev[27] !== last_MemData_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[27] = MemData_expected_prev[27];
	end
	if (
		( MemData_expected_prev[28] !== 1'bx ) && ( MemData_prev[28] !== MemData_expected_prev[28] )
		&& ((MemData_expected_prev[28] !== last_MemData_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[28] = MemData_expected_prev[28];
	end
	if (
		( MemData_expected_prev[29] !== 1'bx ) && ( MemData_prev[29] !== MemData_expected_prev[29] )
		&& ((MemData_expected_prev[29] !== last_MemData_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[29] = MemData_expected_prev[29];
	end
	if (
		( MemData_expected_prev[30] !== 1'bx ) && ( MemData_prev[30] !== MemData_expected_prev[30] )
		&& ((MemData_expected_prev[30] !== last_MemData_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[30] = MemData_expected_prev[30];
	end
	if (
		( MemData_expected_prev[31] !== 1'bx ) && ( MemData_prev[31] !== MemData_expected_prev[31] )
		&& ((MemData_expected_prev[31] !== last_MemData_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemData[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemData_expected_prev);
		$display ("     Real value = %b", MemData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MemData_exp[31] = MemData_expected_prev[31];
	end
	if (
		( MemEna_expected_prev !== 1'bx ) && ( MemEna_prev !== MemEna_expected_prev )
		&& ((MemEna_expected_prev !== last_MemEna_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemEna :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemEna_expected_prev);
		$display ("     Real value = %b", MemEna_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemEna_exp = MemEna_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mips_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [31:0] MemAddress;
wire [31:0] MemData;
wire MemEna;

wire sampler;                             

// assign statements (if any)                          
mips i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.MemAddress(MemAddress),
	.MemData(MemData),
	.MemEna(MemEna),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #50000 1'b0;
end 

mips_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

mips_vlg_check_tst tb_out(
	.MemAddress(MemAddress),
	.MemData(MemData),
	.MemEna(MemEna),
	.sampler_rx(sampler)
);
endmodule

